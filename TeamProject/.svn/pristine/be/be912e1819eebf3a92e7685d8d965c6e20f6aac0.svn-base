package sound;

import gui.Utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import weapon.AssaultRifle;
import weapon.DBarrelPistol;
import weapon.SMG;
import weapon.Shotgun;
import weapon.SniperRifle;

public class AudioManager implements Runnable {
    // volume gain in decibel
    public static final float GAIN_MINVOLUME = -30;
    public static final float GAIN_RANGE = 20;
    
    // artificial volume of noise in game
    // noises will be from 130db (shotgun shot) to 0db (silence)
    public static final float GAME_RANGE = 120;
    
    // noise constants in game
    public static final float BULLETHITNOISE = 30;
    public static final float BULLETWALLNOISE = 50;
    
    static MusicPlayer currentMusic = null;
    
    ExecutorService threadPool;
    ConcurrentLinkedQueue<PlayMessage> pending;
    HashMap<Integer,Sound> weaponSoundMap;
    HashMap<Integer,Float> weaponNoiseMap;
    ArrayList<Sound> footstepSounds;
    
    private static final String SOUND_DIR = "resource/audio/sounds/";
    private static final String MUSIC_DIR = "resource/audio/music/";
    
    public AudioManager () {
        threadPool = Executors.newFixedThreadPool(10);
        pending = new ConcurrentLinkedQueue<PlayMessage>();
        weaponSoundMap = new HashMap<Integer,Sound>();
        weaponNoiseMap = new HashMap<Integer,Float>();
        footstepSounds = new ArrayList<Sound>(4);
        
        weaponNoiseMap.put(AssaultRifle.weaponId,80f);
        weaponNoiseMap.put(DBarrelPistol.weaponId,60f);
        weaponNoiseMap.put(Shotgun.weaponId,120f);
        weaponNoiseMap.put(SniperRifle.weaponId,80f);
        weaponNoiseMap.put(SMG.weaponId,80f);
        
        // initialize sound files
        weaponSoundMap.put(AssaultRifle.weaponId,new Sound(SOUND_DIR+"gunshot_assault.wav"));
        weaponSoundMap.put(DBarrelPistol.weaponId,new Sound(SOUND_DIR+"gunshot_pistol.wav"));
        weaponSoundMap.put(Shotgun.weaponId,new Sound(SOUND_DIR+"gunshot_shotgun.wav"));
        weaponSoundMap.put(SniperRifle.weaponId,new Sound(SOUND_DIR+"gunshot_sniper.wav"));
        weaponSoundMap.put(SMG.weaponId,new Sound(SOUND_DIR+"gunshot_smg.wav"));
        
        footstepSounds.add(new Sound(SOUND_DIR+"footstep1.wav"));
        footstepSounds.add(new Sound(SOUND_DIR+"footstep2.wav"));
        footstepSounds.add(new Sound(SOUND_DIR+"footstep3.wav"));
        footstepSounds.add(new Sound(SOUND_DIR+"footstep4.wav"));
    }
    
    private void playSound(Sound sound, float volume) {
        if (volume>=0) {
            // normalize from real-life decibel scale to in-game gain scale
            volume = GAIN_RANGE*Math.min(GAME_RANGE,volume)/GAME_RANGE + GAIN_MINVOLUME;
            for (PlayMessage pm:pending) {
                if (pm.sound==sound) {
                    pm.volume = Math.max(pm.volume,volume);
                    return;
                }
            }
            pending.add(new PlayMessage(sound,volume));
        }
    }
    
    public void playWeaponSound(int weaponId, float volume) {
        playSound(weaponSoundMap.get(weaponId),volume);
    }
    
    public void playFootstepSound(float volume) {
        playSound(footstepSounds.get(Utils.random().nextInt(footstepSounds.size())),volume);
    }
    
    public static void playMusic(String name) {
        stopMusic(); // TODO if possible, fade out / in
        currentMusic = new MusicPlayer(MUSIC_DIR+name);
        new Thread(currentMusic).start();
    }
    
    public static void stopMusic() {
        if (currentMusic!=null) {
            currentMusic.setMusicStop();
            currentMusic = null;
        }
    }

    public void update() {
        threadPool.execute(this);
    }
    
    public float getWeaponNoise(int weaponId) {
        return weaponNoiseMap.get(weaponId);
    }
    
    private static class PlayMessage
    {
        Sound sound;
        float volume;
        
        public PlayMessage(Sound sound, float volume) {
            this.sound = sound;
            this.volume = volume;
        }
    }

    @Override
    public void run() {
        for (PlayMessage pm:pending) {
            SoundPlayer sp = new SoundPlayer(pm.sound,pm.volume,threadPool);
            sp.play();
        }
        pending.clear();
    }
    
    public static void main (String[] args) {
        AudioManager am = new AudioManager();
        Sound test = new Sound(SOUND_DIR+"test.wav");
        am.playSound(test, 100);
        am.update();
    }
}
