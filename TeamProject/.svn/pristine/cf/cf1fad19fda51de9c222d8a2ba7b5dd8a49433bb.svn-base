package gui;

import java.awt.Color;
import java.awt.Graphics;
import java.util.List;

import javax.swing.JComponent;

import core.Arena;
import core.Tile;

/**
 * This class will handle the drawing of a minimap.
 * 
 * @author Madyan Al-Jazaeri
 */
public class Minimap extends JComponent {
    private static final long serialVersionUID = -1715530638861052738L;
	
	private static final int TILE_SIZE   = 3;  // tile size
	private static final int RADIUS      = 3;  // character radius
	private static final int OFFSET      = 10; // gui offset factor from top and left

	private static final int REAL_OFFSET = OFFSET * TILE_SIZE;
	
	private static final int charTransparency = 180;
	private static final int transparency = 170;
	private static final Color BORDER_COLOR          = new Color(0, 0, 0, transparency * 2 / 3);
    private static final Color UNWALKABLE_TILE_COLOR = new Color(25, 140, 255, transparency);
    
    
    private static final Color PLAYER_COLOR          = new Color(255, 255, 255, charTransparency);
    private static final Color TEAM_COLOR            = new Color(0, 255, 0, charTransparency);
    private static final Color ENEMY_COLOR           = new Color(255, 0, 0, charTransparency);

	private Arena arena;
	private ClientPlayer mainPlayer;
	private List<ClientPlayer> players;
	
	public Minimap(Arena arena, int id, List<ClientPlayer> players) {
		this.arena = arena;
		this.players = players;
		this.mainPlayer = Utils.findPlayer(players, id);
	}
	
	protected void paintComponent(Graphics g) {
	    super.paintComponent(g);
        // render border
        g.setColor(BORDER_COLOR);
        int borderCoord  = REAL_OFFSET - 5;
        int borderWidth  = arena.getWidth()  * TILE_SIZE + 10;
        int borderHeight = arena.getHeight() * TILE_SIZE + 10;
		g.fillRect(borderCoord, borderCoord, borderWidth, borderHeight);
		
		// render minimap
		for (int i = OFFSET; i < arena.getWidth() + OFFSET; i++) {
			for (int j = OFFSET; j < arena.getHeight() + OFFSET; j++) {
            	boolean walkable = arena.get(i - OFFSET, j - OFFSET).isWalkable();
				if (! walkable) {
					g.setColor(UNWALKABLE_TILE_COLOR);		
					int x = i * TILE_SIZE;
					int y = j * TILE_SIZE;
					g.fillRect(x, y, TILE_SIZE, TILE_SIZE);
				}
            }
        }
		
		// render teams
		for (ClientPlayer p : players) {
		    // at the moment inactive players are not drawn
		    // can draw them with lighter colours to show
		    // that their data is old
		    if (!p.active)
		        continue;
			if (p.id != mainPlayer.id) {
				if (p.team==mainPlayer.team) { // if same team
					g.setColor(TEAM_COLOR);
				} else {
					g.setColor(ENEMY_COLOR);
				}
			} else {
			    g.setColor(PLAYER_COLOR);
			}
			
			int characterX = REAL_OFFSET + (p.character.x * TILE_SIZE / Tile.tileSize) - RADIUS;
            int characterY = REAL_OFFSET + (p.character.y * TILE_SIZE / Tile.tileSize) - RADIUS;
            int characterSize = 2 * RADIUS;
            g.fillOval(characterX, characterY, characterSize, characterSize);
		}
	}
	
}