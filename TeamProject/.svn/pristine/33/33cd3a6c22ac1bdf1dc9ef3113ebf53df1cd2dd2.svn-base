package gui;

import game.Game;
import graphics.AnimationSystem;
import graphics.Renderer;
import gui.ClientPlayer;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;

import character.CharacterFactory;
import network.FullCharacterData;
import network.GameEvent;
import network.PartialCharacterData;
import network.ProjectileData;
import network.GameDataPackets.*;
import network.GameEvent.*;
import core.Arena;
import core.LineOfSight;
import core.PowerUp;
import core.PowerUps;
import sound.AudioManager;

/**
 * The gui where a match will take place.
 */
public class GameScreen extends AbstractScreen implements KeyListener,
		MouseListener {
	private static final long serialVersionUID = 1383374303503610168L;
	// private World world;
	private FullCharacterData mainCharacter = null;
	private Arena arena;
	private Camera camera;
	private final int id;
	private Socket socket;
	private InputPacket input;
	private ConcurrentLinkedQueue<WorldStatePacket> wsps;
	private WorldStatePacket wsp;
	private AnimationSystem globalAnimations;
	private AnimationSystem visualAnimations;
	private AudioManager audioManager;
	private List<ClientPlayer> team1;
	private List<ClientPlayer> team2;
	private List<ClientPlayer> players;
	private TeamListModel team1Model;
	private TeamListModel team2Model;
	private PowerUp[] powerUps;
	private JPanel scoreboard;
	private JLabel teamScore;
	private JComponent minimap;
	private LineOfSight lineOfSight = new LineOfSight();

	/**
	 * Creates a new gamescreen where the match will take place
	 * 
	 * @param game
	 *            The game loop which will use the game screen
	 * @param id
	 *            The id of the game screen
	 * @param socket
	 *            The socket of the game screen
	 * @param arenaName
	 *            The name of the map played on the game screen
	 * @param team1
	 *            The list of players on team 1
	 * @param team2
	 *            The list of players on team 2
	 * @throws IOException
	 *             Exception thrown on gamescreen
	 */
	public GameScreen(Game game, int id, Socket socket, String arenaName,
			List<ClientPlayer> team1, List<ClientPlayer> team2)
			throws IOException {
		super(game);
		setFocusTraversalKeysEnabled(false);
		this.arena = new Arena(arenaName, true);
		this.team1 = team1;
		this.team2 = team2;
		this.players = new LinkedList<ClientPlayer>();
		players.addAll(team1);
		players.addAll(team2);
		for (ClientPlayer p : players) {
			p.character = new PartialCharacterData();
		}

		this.id = id;
		globalAnimations = new AnimationSystem();
		visualAnimations = new AnimationSystem();
		audioManager = new AudioManager();
		input = new InputPacket();
		camera = new Camera(arena);

		// this.powerUps = PowerUps.generatePowerUps(arena, players); //
		// generate random power ups at random positions
		// powerUps[0].setCoord(0, 0); // change location of first power up to
		// (0,0) for testing

		// TODO fix later, this is messy - create connection in one place and
		// read from it in another

		this.socket = socket;
		socket.setSoTimeout(10);
		wsps = new ConcurrentLinkedQueue<WorldStatePacket>();
		BufferedImage rectile = null;
		try {
			rectile = ImageIO.read(new FileInputStream(
					"resource/weapon/rectile.png"));
		} catch (Exception e) {
		}
		addKeyListener(this);
		addMouseListener(this);
		Point center = new Point(rectile.getWidth() / 2,
				rectile.getHeight() / 2);
		this.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(rectile,
				center, "rectile"));

		initUI();
	}

	@Override
	public void update() {
		sendInput();
		WorldStatePacket wsp = receiveState();

		// update state
		// TODO this queue should be used for interpolation
		// at the moment it's just a placeholder and keeps exactly 5 past states
		// (around 100ms delay)
//		while (wsps.size() > 0) {
//			wsp = wsps.poll();
//		}
		updateCursor();
//      for (PowerUp p:powerUps) {
//          p.update(players);
//      }
        globalAnimations.update();
        visualAnimations.update();
        audioManager.update();
		if (wsp != null) {
			this.wsp = wsp;
			for (ClientPlayer p : players) {
				p.active = false;
			}
			for (PartialCharacterData cdata : wsp.characters) {
				ClientPlayer p = Utils.findPlayer(players, cdata.id);
				if (p != null) {
					p.character = cdata;
					p.active = true;
				}
			}
			mainCharacter = wsp.player;
            mainCharacter.direction = (float)
                    Math.atan2(mainCharacter.y - input.cy,input.cx - mainCharacter.x);
	        
			camera.update(this, mainCharacter);
			for (GameEvent e : wsp.events) {
				listener.onEventReceived(e);
			}
		}
		

		// for (PowerUp powerUp : powerUps) {
		// powerUp.update(powerUps, arena, players);
		// }
	}

	/**
	 * Initialises the UI
	 */
	private void initUI() {
		this.setLayout(new BoxLayout(this, BoxLayout.PAGE_AXIS));
		teamScore = GUIFactory.getStyledLabel("0 - 0");
		teamScore.setHorizontalAlignment(SwingConstants.CENTER);
		teamScore.setAlignmentX(Component.CENTER_ALIGNMENT);
		this.add(teamScore);
		scoreboard = GUIFactory.getTransparentPanel();
		team1Model = new TeamListModel(team1);
		team2Model = new TeamListModel(team2);

		JList<ClientPlayer> team1List = new JList<ClientPlayer>(team1Model);
		JList<ClientPlayer> team2List = new JList<ClientPlayer>(team2Model);
		team1List.setCellRenderer(playerRenderer);
		team2List.setCellRenderer(playerRenderer);
		team1List.setOpaque(false);
		team2List.setOpaque(false);

		scoreboard.add(team1List);
		scoreboard.add(team2List);
		this.add(scoreboard);
		scoreboard.setVisible(false);

		minimap = new Minimap(arena, id, players);
		this.add(minimap);
	}

	/**
	 * Updates the cursor
	 */
	private void updateCursor() {
		Point cursorOnScreen = MouseInfo.getPointerInfo().getLocation();
		Point gameOnScreen = getLocationOnScreen();
		input.cx = cursorOnScreen.x - gameOnScreen.x + camera.getTopLeftX(this);
		input.cy = cursorOnScreen.y - gameOnScreen.y + camera.getTopLeftY(this);
	}

	/**
	 * Send an input of a player to gamescreen
	 */
	private void sendInput() {
		// send input
		try {
			ObjectOutputStream out = new ObjectOutputStream(
					socket.getOutputStream());
			input.time = System.currentTimeMillis();
			out.writeObject(input);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			System.out
					.println("Exception when trying to send input to network");
			e.printStackTrace();
		}
	}

	/**
	 * Receives the state of the gamescreen
	 * 
	 * @return Returns the WorldStatePacket of the gamescreen
	 */
	private WorldStatePacket receiveState() {
		// receive state
		WorldStatePacket wsp = null;

		try {
			InputStream in = socket.getInputStream();
			while (in.available() > 1000) {
				wsp = (WorldStatePacket) new ObjectInputStream(in).readObject();
			}
		} catch (IOException e) {
			System.out.println("Timeout when reading data from network");
		} catch (ClassNotFoundException e) {
		}

		return wsp;
	}

	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		// render background
		g.setColor(Color.BLACK);
		g.fillRect(0, 0, getWidth(), getHeight());

		// render HUD
		// render world
		int transX = camera.getTopLeftX(this);
		int transY = camera.getTopLeftY(this);
		g.translate(-transX, -transY);

		Graphics2D g2d = (Graphics2D) g;
		RenderingHints rh = new RenderingHints(RenderingHints.KEY_ANTIALIASING,
				RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setRenderingHints(rh);

		if (mainCharacter != null) {
			// render the dark part
			Shape los = lineOfSight.generateLoS(mainCharacter, arena);
			arena.renderDark(g, camera.getDrawArea(this));
			// Renderer.renderArenaBackground(g2d, camera.getDrawArea(this));
			globalAnimations.render(g2d);

			// render the light part
			g2d.clip(los);
			arena.render(
					g,
					getCharacterVisionBox(mainCharacter.x, mainCharacter.y,
							mainCharacter.viewRange));
			ClientPlayer localPlayer = Utils.findPlayer(players, id);
			for (ClientPlayer p : players) {
				if (p.id != id && p.active) {
					PartialCharacterData ch = p.character;
					Renderer.renderCharacter(g2d, ch.x, ch.y, ch.r, p.type,
							p.team == localPlayer.team);
				}
			}
			for (ProjectileData p : wsp.projectiles) {
				Renderer.renderProjectile(g2d, p.x, p.y, p.dx, p.dy);
			}
			for (PartialCharacterData h : wsp.hostages) {
				Renderer.renderCharacter(g2d, h.x, h.y, h.r, 0, true);
			}
			visualAnimations.render(g2d);
			// g2d.drawImage(light,mainCharacter.x-mainCharacter.viewRange,mainCharacter.y-mainCharacter.viewRange,mainCharacter.viewRange*2,mainCharacter.viewRange*2,
			// null);
			g2d.setClip(null);

			Renderer.renderMainCharacter(g2d, mainCharacter, localPlayer.type);

			// for (PowerUp powerUp : powerUps) {
			// powerUp.render(g); // renders each power up
			// }
		}
		// renderCursor(g);
		g.translate(transX, transY);
	}

	private Rectangle getCharacterVisionBox(int x, int y, int viewRange) {
		return new Rectangle(x - viewRange, y - viewRange, viewRange * 2,
				viewRange * 2);
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// if ESC key show option menu or sth

		// if tab/some other key show detailed scoreboard
		if (e.getKeyCode() == KeyEvent.VK_TAB)
			this.scoreboard.setVisible(true);

		// if enter enable chat

		// else pass the event to the mainCharacter
		// TODO CLIENT: send event to network
		// TODO SERVER: receive event and process
		keyChanged(e, true);
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// if tab/some other key hide detailed scoreboard
		if (e.getKeyCode() == KeyEvent.VK_TAB)
			this.scoreboard.setVisible(false);

		// else pass the event to the mainCharacter
		keyChanged(e, false);
	}

	/**
	 * Records when a key event happens
	 * 
	 * @param e
	 *            The key pressed
	 * @param b
	 *            The boolean of the key event
	 */
	private void keyChanged(KeyEvent e, boolean b) {
		switch (e.getKeyCode()) {
		case KeyEvent.VK_SHIFT:
			// run
			input.running = b;
			break;

		case KeyEvent.VK_W:
			// move up
			input.top = b;
			break;

		case KeyEvent.VK_S:
			// move down
			input.down = b;
			break;

		case KeyEvent.VK_A:
			// move left
			input.left = b;
			break;

		case KeyEvent.VK_D:
			// move right
			input.right = b;
			break;
		case KeyEvent.VK_CONTROL:
			input.sneaking = b;
			break;
		}
	}

	@Override
	public void keyTyped(KeyEvent arg0) {
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
	}

	@Override
	public void mouseExited(MouseEvent event) {
	}

	@Override
	public void mousePressed(MouseEvent event) {
		if (event.getButton() == MouseEvent.BUTTON1) {
			input.fire1 = true;
		}
	}

	private ListCellRenderer<ClientPlayer> playerRenderer = new ListCellRenderer<ClientPlayer>() {

		@Override
		public Component getListCellRendererComponent(
				JList<? extends ClientPlayer> list, ClientPlayer value,
				int index, boolean isSelected, boolean cellHasFocus) {
			// TODO Auto-generated method stub
			String text = value.name + "     " + value.kills + "     "
					+ value.deaths;
			ClientPlayer localPlayer = Utils.findPlayer(players, id);
			JLabel player = new JLabel(text, new ImageIcon(
					CharacterFactory.getImage(value.type,
							value.team == localPlayer.team ? 1 : 0)),
					JLabel.LEFT);
			player.setForeground(Color.WHITE);
			player.setFont(GUIFactory.font_s);
			return player;
		}
	};

	@Override
	public void mouseReleased(MouseEvent event) {
		if (event.getButton() == MouseEvent.BUTTON1) {
			input.fire1 = false;
		}
	}
	
	private GameEventListener listener = new GameEventListener () {
        @Override
        public void onEventReceived(GameEvent event) {
            if (event instanceof PlayerDieEvent) {
                PlayerDieEvent e = (PlayerDieEvent) event;
                ClientPlayer killer = Utils.findPlayer(players,e.killerID);
                ClientPlayer killed = Utils.findPlayer(players,e.killedID);
                
                killed.deaths++;
                if (killer.team!=killed.team) {
                    killer.kills++;
                } else { 
                    killer.kills--;
                }
                team1Model.invalidate();
                team2Model.invalidate();
            } else if (event instanceof ScoreChangedEvent) {
                final ScoreChangedEvent e = (ScoreChangedEvent) event;
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        teamScore.setText(e.team1Score+" - "+e.team2Score);
                    }});
            } else if (event instanceof GunShotEvent) {
                GunShotEvent e = (GunShotEvent) event;
                float noise = audioManager.getWeaponNoise(e.weaponId); 
                System.out.println("A gunshot (noise:"+noise+") at " + e.x+","+e.y);
                visualAnimations.addShotAnimation(e.x,e.y,e.direction);
                
                
                float volume = Utils.getVolumeAtDistance(noise,Point.distance(e.x,e.y,mainCharacter.x,mainCharacter.y));
                if (volume>=0) {
                    globalAnimations.addNoiseAnimation(e.x,e.y,noise);
                    audioManager.playWeaponSound(e.weaponId,volume);
                }
            } else if (event instanceof BulletHitWallEvent) {
                BulletHitWallEvent e = (BulletHitWallEvent) event;
                System.out.println("A bullet hits wall at " + e.x+","+e.y);
                globalAnimations.addNoiseAnimation(e.x,e.y,20);
                visualAnimations.addBulletWallAnimation(e.x,e.y);
            } else if (event instanceof BulletHitPlayerEvent) {
                BulletHitPlayerEvent e = (BulletHitPlayerEvent) event;
                System.out.println("A bullet hits a character at "+e.x+","+e.y);
                globalAnimations.addNoiseAnimation(e.x,e.y,10);
                visualAnimations.addBloodAnimation(e.x,e.y);
            } else if (event instanceof FootStepEvent) {
                FootStepEvent e = (FootStepEvent) event;
                System.out.println("A footstep at "+e.x+","+e.y);
                float volume = Utils.getVolumeAtDistance(e.noise,Point.distance(e.x,e.y,mainCharacter.x,mainCharacter.y));
                if (volume>=0) {
                    globalAnimations.addNoiseAnimation(e.x,e.y,e.noise);
                    audioManager.playFootstepSound(volume);
                }
            } else if (event instanceof GameEndEvent) {
                // TODO back to lobby screen
                onEscape();
                try {
                    socket.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
	};
}
