package graphics;

import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;

public class ImageBlender {
//    private static final float[] gaussian77 =
//        {0.00000067f,0.00002292f,0.00019117f,0.00038771f,0.00019117f,0.00002292f,0.00000067f,
//            0.00002292f,0.00078634f,0.00655965f,0.01330373f,0.00655965f,0.00078633f,0.00002292f,
//            0.00019117f,0.00655965f,0.05472157f,0.11098164f,0.05472157f,0.00655965f,0.00019117f,
//            0.00038771f,0.01330373f,0.11098164f,0.22508352f,0.11098164f,0.01330373f,0.00038771f,
//            0.00019117f,0.00655965f,0.05472157f,0.11098164f,0.05472157f,0.00655965f,0.00019117f,
//            0.00002292f,0.00078633f,0.00655965f,0.01330373f,0.00655965f,0.00078633f,0.00002292f,
//            0.00000067f,0.00002292f,0.00019117f,0.00038771f,0.00019117f,0.00002292f,0.00000067f};
    private static final float[] box77 = 
        {1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,
        1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,
        1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,
        1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,
        1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,
        1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,
        1/49f,1/49f,1/49f,1/49f,1/49f,1/49f,1/49f};
    private static final BufferedImageOp blurOp =
            new ConvolveFilter(new Kernel(7,7,box77));
    public static BufferedImage darkenImage(BufferedImage source, float darkenFactor, float contrast) {
        int width = source.getWidth();
        int height = source.getHeight();
        BufferedImage dest = new BufferedImage(width,height,BufferedImage.TYPE_3BYTE_BGR);
        float sumR = 0,sumG = 0, sumB = 0;
        for (int x=0;x<width;x++) {
            for (int y=0;y<height;y++) {
                int RGB = source.getRGB(x, y);
                sumR += (RGB>>16)&0xFF;
                sumG += (RGB>> 8)&0xFF;
                sumB += (RGB    )&0xFF;
            }
        }
        int pixels = width * height;
        float avR = sumR / pixels;
        float avG = sumG / pixels;
        float avB = sumB / pixels;
        for (int x=0;x<width;x++) {
            for (int y=0;y<height;y++) {
                int sRGB = source.getRGB(x, y);
                int sR = (sRGB>>16)&0xFF;
                int sG = (sRGB>> 8)&0xFF;
                int sB = (sRGB    )&0xFF;
                
                int dR = (int)(Math.min(255,Math.max(0, (sR-avR)*contrast+avR))/darkenFactor);
                int dG = (int)(Math.min(255,Math.max(0, (sG-avG)*contrast+avG))/darkenFactor);
                int dB = (int)(Math.min(255,Math.max(0, (sB-avB)*contrast+avB))/darkenFactor);
                
                int dRGB = dR<<16 | dG<<8 | dB;
                dest.setRGB(x, y, dRGB);
            }
        }
        return dest;
    }
    
    public static BufferedImage blurImage (BufferedImage source) {
        return blurOp.filter(source,null);
    }
    
}
