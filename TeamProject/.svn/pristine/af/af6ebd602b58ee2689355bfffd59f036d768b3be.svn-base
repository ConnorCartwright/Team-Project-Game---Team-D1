package screen;

import game.Game;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.AbstractListModel;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.ListCellRenderer;
import javax.swing.border.EmptyBorder;

import character.CharacterFactory;
import physics.Arena;
import server.LobbyRequest;
import server.LobbyRequest.*;
import server.LobbyServer;

public class LobbyScreen extends AbstractScreen implements ActionListener {
	private LobbyServer lobbyServer;
	private Socket socket;
	private JButton playButton;
	private JButton readyButton;
	private String arenaName = "test40";
	private JLabel typeIcon;
	private JLabel typeName;
	private JButton left;
	private JButton right;
	private JButton switchTeam;
	
	private TeamListModel team1Model;
	private TeamListModel team2Model;
	
	// place holder, use each type's icon later
	private Image rectile;
	private final ClientPlayer clientPlayer;
	private final List<ClientPlayer> team1;
	private final List<ClientPlayer> team2;
	private String config = "Settings shown here\nSetting1\nSetting2\nSetting3"; 
	private int currentType;

	public LobbyScreen(Socket socket, LobbyInformationPacket lip, Game game) {
		super(game);
		currentType = 0;
		team1 = new ArrayList<ClientPlayer>();
		team2 = new ArrayList<ClientPlayer>();
		this.socket = socket;
		initLobbyInfo(lip);
		clientPlayer = findPlayer(lip.id);
		initUI(false);
		new Thread(requestListener).start();
	}

	public LobbyScreen(LobbyServer lobbyServer, Socket socket, LobbyInformationPacket lip, Game game) {
		super(game);
		team1 = new ArrayList<ClientPlayer>();
        team2 = new ArrayList<ClientPlayer>();
		this.lobbyServer = lobbyServer;
		this.socket = socket;
		initLobbyInfo(lip);
		clientPlayer = findPlayer(lip.id);
		initUI(true);
		new Thread(requestListener).start();
	}
	
	private void initLobbyInfo(LobbyInformationPacket lip) {
	    arenaName = lip.gameConfig.arena;
	    for (ClientPlayer p:lip.clientPlayers) {
	        if (p.team==0) {
	            team1.add(p);
	        } else {
	            team2.add(p);
	        }
	    }
	}
	
	private void initUI (boolean isHost) {
	    try {
            rectile = ImageIO.read(new FileInputStream("resource/weapon/rectile.png"));
        } catch (IOException e) {
            System.out.println("Fail to load type images.");
            e.printStackTrace();
        }
	    // border width
	    int bw = game.getHeight()/4;
	    this.setBorder(new EmptyBorder(bw,bw,bw/2,bw));
	    // team panels
	    JPanel teamPanel = new JPanel();
	    teamPanel.setOpaque(false);
	    //teamPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE));
	    teamPanel.setLayout(new GridBagLayout());
	    teamPanel.setMaximumSize(new Dimension(game.getWidth()*6/10,game.getHeight()*6/10));
	    GridBagConstraints c = new GridBagConstraints();
	    c.fill = GridBagConstraints.HORIZONTAL;
	    c.insets = new Insets(5,5,5,5);
	    
	    c.weightx = 1;
	    teamPanel.add(GUIFactory.getStyledLabel(" Team 1"),c);
	    c.gridx = 1;
	    teamPanel.add(GUIFactory.getStyledLabel(" Team 2"),c);
	    c.gridy = 1;
	    c.gridx = 0;
	    c.gridwidth = 2;
	    teamPanel.add(GUIFactory.getStyledSeparator(),c);
	    c.gridy++;
	    c.gridwidth = 1;
	    c.weighty = 1;
        
	    team1Model = new TeamListModel(team1);
	    JList<ClientPlayer> team1List = new JList<ClientPlayer>(team1Model);
	    team1List.setOpaque(false);
	    team1List.setCellRenderer(playerRenderer);
	    c.anchor = GridBagConstraints.NORTH;
	    teamPanel.add(team1List,c);
	    
	    c.gridx = 1;
	    team2Model = new TeamListModel(team2);
	    JList<ClientPlayer> team2List = new JList<ClientPlayer>(team2Model);
        team2List.setOpaque(false);
        team2List.setCellRenderer(playerRenderer);
        teamPanel.add(team2List,c);
        
        c.gridx = 0;
        c.weighty = 0;
        c.gridy++;
        c.gridwidth = 2;
        teamPanel.add(GUIFactory.getStyledSeparator(),c);
        
        c.gridy++;
        
        JPanel settingPanel = GUIFactory.getTransparentPanel();
        
        JPanel characterPanel = GUIFactory.getTransparentPanel();
        //characterPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE));

        left = GUIFactory.getStyledFunctionButton("<");
        right = GUIFactory.getStyledFunctionButton(">");
        left.addActionListener(this);
        right.addActionListener(this);
        characterPanel.add(left);
        // place holder
        JPanel selectedCharacter = GUIFactory.getTransparentPanel();
        typeIcon = new JLabel();
        selectedCharacter.add(typeIcon);
        typeName = GUIFactory.getStyledLabel("");
        selectedCharacter.add(typeName);
        setTypeSelection(0);
        characterPanel.add(selectedCharacter);
        characterPanel.add(right);
        
        settingPanel.add(characterPanel);
        settingPanel.add(Box.createHorizontalStrut(50));
        //settingPanel.add(GUIFactory.getStyledLabel("(Map goes here)"));
        // place holder for map
        JLabel map = null;
        try {
            Image mapImage = ImageIO.read(new FileInputStream("resource/map/test40.bmp"));
            Image scaledMap = mapImage.getScaledInstance(100,100,Image.SCALE_SMOOTH);
            map = new JLabel(new ImageIcon(scaledMap));
        } catch (IOException e) {
            System.out.println("Error loading map image");
            e.printStackTrace();
            map = new JLabel("Error loading map");
        }
        settingPanel.add(map);
        // place holder for setting
        JTextArea settingText = new JTextArea(config);
        settingText.setFont(GUIFactory.font_s);
        settingText.setOpaque(false);
        settingText.setForeground(Color.WHITE);
        settingPanel.add(settingText);
        teamPanel.add(settingPanel,c);
        
        c.gridy++;
        teamPanel.add(GUIFactory.getStyledSeparator(),c);
        
        c.gridy++;
        JPanel buttonPanel = GUIFactory.getTransparentPanel();
        switchTeam = GUIFactory.getStyledFunctionButton("Switch team");
        switchTeam.addActionListener(this);
        buttonPanel.add(switchTeam);
        if (isHost) {
            // THE HOST CAN START GAME AND CHANGE SETTINGS
            playButton = GUIFactory.getStyledFunctionButton("Play");
            playButton.addActionListener(this);
            buttonPanel.add(playButton);
        }
        readyButton = GUIFactory.getStyledFunctionButton("Ready");
        readyButton.addActionListener(this);
        buttonPanel.add(readyButton);
        
        teamPanel.add(buttonPanel,c);
	    this.setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
	    this.add(teamPanel);
	}
	
	@Override
	public void update() {
	}

	// TODO also load image / stuff
	// not sure if the host should be allowed to change arena in the lobby
	// or just let him choose it when creating the game (more commonly seen)
	// -> simplicity -> just let him choose arena & settings at room creation
	private void loadArena(String name) {
		arenaName = name;
	}

	private void setTypeSelection(int type) {
	    final int color = 1;
	    typeIcon.setIcon(new ImageIcon(CharacterFactory.getImage(type,color)));
	    typeName.setText(CharacterFactory.getName(type));
	    sendRequest(new ChangeCharacterRequest(clientPlayer.id,currentType));
	}
	
	private ClientPlayer findPlayer(int i) {
	    ClientPlayer p = null;
        for (ClientPlayer p2:team1){
            if (p2.id==i) {
                p = p2;
                break;
            }
        }
        if (p==null) {
            for (ClientPlayer p2:team2){
                if (p2.id==i) {
                    p = p2;
                    break;
                }
            }
        }
        return p;
	}
	
	@Override
	public void actionPerformed(ActionEvent arg0) {
		if (arg0.getSource() == playButton) {
			try {
				// lobbyServer.changeArena("test40");
				lobbyServer.startGame();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} else if (arg0.getSource() == switchTeam) {
		    // atm only team game with 2 teams, so
		    int to = clientPlayer.team==0?1:0;
		    sendRequest(new SwitchTeamRequest(clientPlayer.id,to));
		} else if (arg0.getSource() == readyButton) {
            sendRequest(new ToggleReadyRequest(clientPlayer.id,!clientPlayer.ready));
        } else if (arg0.getSource() == left) {
            currentType--;
            if (currentType<0)
                currentType = CharacterFactory.MAXTYPE;
            setTypeSelection(currentType);
        } else if (arg0.getSource() == right) {
            currentType++;
            if (currentType>CharacterFactory.MAXTYPE)
                currentType = 0;
            setTypeSelection(currentType);
        }
	}

	private void sendRequest(LobbyRequest request) {
	    try {
            new ObjectOutputStream(socket.getOutputStream()).writeObject(request);
        } catch (IOException e) {
            System.out.println("Error sending request "+request.getClass()+" to server.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
	}
	
	private Runnable requestListener = new Runnable() {
		@Override
		public void run() {
			while (true) {
				try {
					ObjectInputStream ois = new ObjectInputStream(socket.getInputStream());
					System.out.println("Message stream available: " + ois.available());
					Object message = ois.readObject();
					if (message instanceof ChangeArenaRequest) {
						loadArena(((ChangeArenaRequest) message).arenaName);
					} else if (message instanceof NewPlayerRequest) {
					    NewPlayerRequest request = ((NewPlayerRequest)message);
					    ClientPlayer p = new ClientPlayer();
					    p.id = request.id;
					    p.name = request.name;
					    p.ready = false;
					    p.team = 0;
					    p.type = 0;
					    team1.add(p);
                    } else if (message instanceof StartGameRequest) {
						game.setScreen(new GameScreen(game,clientPlayer.id, socket, new Arena(arenaName), team1, team2));
						break;
					} else if (message instanceof SwitchTeamRequest) {
					    SwitchTeamRequest request = ((SwitchTeamRequest)message);
					    List<ClientPlayer> to   = request.desTeam==0?team1:team2;
					    List<ClientPlayer> from   = request.desTeam==0?team2:team1;
					    ClientPlayer p = findPlayer(request.playerId);
					    p.team = request.desTeam;
					    from.remove(p);
					    to.add(p);
					    team1Model.invalidate();
					    team2Model.invalidate();
					} else if (message instanceof ToggleReadyRequest) {
					    ToggleReadyRequest request = ((ToggleReadyRequest)message);
                        ClientPlayer p = findPlayer(request.id);
                        p.ready = request.ready;
                        (p.team==0?team1Model:team2Model).invalidate();
                    } else if (message instanceof ChangeCharacterRequest) {
                        ChangeCharacterRequest request = ((ChangeCharacterRequest)message);
                        ClientPlayer p = findPlayer(request.playerId);
                        p.type = request.typeId;
                        (p.team==0?team1Model:team2Model).invalidate();
                    }
				} catch (IOException | ClassNotFoundException e) {
					System.out.println("Error while receiving message from lobbyServer");
					System.out.println(e.getMessage());
				}
			}
		}
	};

	
	private ListCellRenderer<ClientPlayer> playerRenderer = new ListCellRenderer<ClientPlayer> () {

        @Override
        public Component getListCellRendererComponent(
                JList<? extends ClientPlayer> list, ClientPlayer value, int index,
                boolean isSelected, boolean cellHasFocus) {
            // TODO Auto-generated method stub
            JLabel player = new JLabel(value.name,new ImageIcon(rectile),JLabel.LEFT);
            if (value.ready)
                player.setForeground(Color.WHITE);
            else
                player.setForeground(Color.GRAY);
            player.setFont(GUIFactory.font_s);
            return player;
        }
	};	
}