package geometry;

import java.awt.Point;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.util.LinkedList;
import java.util.List;

public class Geometry {
    private static final double LINE_SAMPLE_THRESHOLD = 4;
    
	public static Point2D intersection(Line2D l1, Line2D l2) {
		Point2D p1 = l1.getP1();
		Point2D p2 = l1.getP2();
		Point2D p3 = l2.getP1();
		Point2D p4 = l2.getP2();

		// From http://paulbourke.net/geometry/lineline2d/
		double d = (p4.getY() - p3.getY()) * (p2.getX() - p1.getX())
				 - (p4.getX() - p3.getX()) * (p2.getY() - p1.getY());
		if (d == 0) {
			return null;
		}

		double s = ((p4.getX() - p3.getX()) * (p1.getY() - p3.getY())
				  - (p4.getY() - p3.getY()) * (p1.getX() - p3.getX())) / d;
		if (s < 0 || s > 1) {
			return null;
		}

		Point2D p = new Point2D.Double(p1.getX() + s * (p2.getX() - p1.getX()),
				p1.getY() + s * (p2.getY() - p1.getY()));

		if (l1.intersectsLine(l2)) {
			return p;
		} else {
			return null;
		}
	}
	
	// Returns the list of points from (x0, y0) to (x1, y1)
	public static List<Point2D> getLineSamples(double x0, double y0, double x1, double y1) {
	    List<Point2D> result = new LinkedList<Point2D>();
	    double smallestDistance = Point.distance(x0, y0, x1, y1);
	    int fragments = 1;
	    while (smallestDistance>LINE_SAMPLE_THRESHOLD) {
	        fragments*=2;
	        smallestDistance/=2;
	    }
	    double dx = (x1-x0)/fragments;
	    double dy = (y1-y0)/fragments;
	    for (int f=0;f<=fragments;f++) {
	        result.add(new Point2D.Double(x0+dx*f,y0+dy*f));
	    }
	    return result;
	}
}
