package physics;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.Scanner;

import javax.imageio.ImageIO;

public class Arena {
	private static final int T1_COLOR = 0xff0000;
	private static final int T2_COLOR = 0x0000ff;

	private String name;
	private Tile[][] tileMap;
	private List<Point> t1Spawns;
	private List<Point> t2Spawns;

	public Arena(String name) throws FileNotFoundException, IOException {
		loadMap(name);
	}

	public void loadMap(String name) throws FileNotFoundException, IOException {
		FileInputStream fileInputStream = new FileInputStream("resource/map/" + name + ".map");

		Scanner sc = new Scanner(fileInputStream);
		this.name = sc.nextLine();

		// load number of tiles
		int n = sc.nextInt();
		Hashtable<Integer, Tile> tileTable = new Hashtable<Integer, Tile>();

		// load tile information
		for (int i = 0; i < n; i++) {
			int color = sc.nextInt(16);
			String filename = sc.next();
			String filename2 = sc.next();
			boolean walkable = sc.nextBoolean();
			boolean transparent = sc.nextBoolean();
			Image tileImage = ImageIO.read(new FileInputStream("resource/tile/" + filename));
			Image tileImageDark = ImageIO.read(new FileInputStream("resource/tile/" + filename2));
			tileTable.put(color, new Tile(walkable, transparent, tileImage, tileImageDark));
		}

		sc.close();

		loadTileMap(name, tileTable);
		loadPositionMap(name);
	}

	private void loadTileMap(String name, Hashtable<Integer, Tile> tileTable)
			throws IOException, FileNotFoundException {
		// load tile map
		BufferedImage image = ImageIO.read(new FileInputStream("resource/map/" + name + ".bmp"));
		tileMap = new Tile[image.getWidth()][image.getHeight()];

		for (int xPixel = 0; xPixel < image.getWidth(); xPixel++) {
			for (int yPixel = 0; yPixel < image.getHeight(); yPixel++) {
				Tile tile = tileTable
						.get(image.getRGB(xPixel, yPixel) & 0xFFFFFF);

				if (tile == null) {
					System.out.println("Invalid color " + String.format("%x",(image.getRGB(xPixel, yPixel)&0xFFFFFF))
							+ " in tile " + xPixel + ", " + yPixel);
					System.exit(-1);
				}

				tileMap[xPixel][yPixel] = tile;
			}
		}
	}

	private void loadPositionMap(String name) throws IOException, FileNotFoundException {
		// load position map
		BufferedImage image = ImageIO.read(new FileInputStream("resource/map/" + name + "_x.bmp"));

		t1Spawns = new ArrayList<Point>();
		t2Spawns = new ArrayList<Point>();

		for (int xPixel = 0; xPixel < image.getWidth(); xPixel++) {
			for (int yPixel = 0; yPixel < image.getHeight(); yPixel++) {
				int color = image.getRGB(xPixel, yPixel) & 0xFFFFFF;
				if (color == T1_COLOR) {
					t1Spawns.add(new Point(xPixel, yPixel));
				} else if (color == T2_COLOR) {
					t2Spawns.add(new Point(xPixel, yPixel));
				}
			}
		}
	}

	// TODO ... return properly
	public List<Point> getSpawn(int team) {
		return (team==0?t1Spawns:t2Spawns);
	}

	public Tile get(int x, int y) {
	    if(x>=getWidth() || y>=getHeight() || x<0 || y<0)
	        return tileMap[0][0];
	    else
	        return tileMap[x][y];
	}

	public int getHeight() {
		return tileMap[0].length;
	}

	public int getWidth() {
		return tileMap.length;
	}

	public int getWidthPixel() {
		return getWidth() * Tile.tileSize;
	}

	public int getHeightPixel() {
		return getHeight() * Tile.tileSize;
	}

	public void renderDark(Graphics g, Rectangle window) {
        int tileSize = Tile.tileSize;
        int x1 = Math.max(0, (int) (window.getX() / tileSize));
        int y1 = Math.max(0, (int) (window.getY() / tileSize));
        int x2 = Math.min(getWidth() - 1, x1 + (int)(window.getWidth()/tileSize)+1);
        int y2 = Math.min(getHeight() - 1, y1 + (int)(window.getHeight()/tileSize)+1);
        for (int x = x1; x <= x2; x++) {
            for (int y = y1; y <= y2; y++) {
                Image image = get(x, y).getImageDark();
                g.drawImage(image, x * tileSize, y * tileSize, tileSize, tileSize, null);
            }
        }
	}

	public void render(Graphics g, Rectangle window) {
	    int tileSize = Tile.tileSize;
        int x1 = Math.max(0, (int) (window.getX() / tileSize));
        int y1 = Math.max(0, (int) (window.getY() / tileSize));
        int x2 = Math.min(getWidth() - 1, x1 + (int)(window.getWidth()/tileSize)+1);
        int y2 = Math.min(getHeight() - 1, y1 + (int)(window.getHeight()/tileSize)+1);
        for (int x = x1; x <= x2; x++) {
            for (int y = y1; y <= y2; y++) {
				Image image = get(x, y).getImage();
				g.drawImage(image, x * tileSize, y * tileSize, tileSize, tileSize, null);
			}
		}
	}

	public String getName() {
		return name;
	}
}
