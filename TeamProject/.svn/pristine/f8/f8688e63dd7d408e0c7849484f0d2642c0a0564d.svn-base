package network;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

import network.GameDataPackets.InputPacket;
import network.GameDataPackets.WorldStatePacket;
import network.GameEvent.*;
import core.AIPlayer;
import core.Arena;
import core.PathFinder;
import core.World;
import character.CharacterFactory;
import character.ControlledCharacter;
import game.Game;

public class GameServer implements Runnable,GameEventListener {
    private World world;
    private boolean tick = true;
    private boolean playing = true;
    private boolean scoreChanged = false;
    private List<ServerPlayer> players;
    private List<GameEvent> events;
    
    public GameServer (List<ServerPlayer> players, String arenaName) throws FileNotFoundException, IOException {
        this.players = players;
        Arena arena = new Arena(arenaName,false);
        world = new World(arena,this);
        events = new LinkedList<GameEvent>();
        PathFinder pathFinder = new PathFinder(arena);
        for (ServerPlayer p : players) {
            if (p instanceof AIPlayer) {
                ((AIPlayer)p).init(arena, pathFinder);
                // ### DEBUG
                ((AIPlayer)p).initDebug(world);
            }
            ControlledCharacter character = CharacterFactory.newCharacter(p.id,p.team,p.type);
            world.addPlayer(character);
            new Thread(new InputReceiver(p,character)).start();
        }
        new Thread(this).start();
    }
    
    @Override
    public void run() {
        while (!playing) {
        }
        while (playing) {
            long last = System.currentTimeMillis();

            // simulate the world
            world.update();
            
            // send world state out every 2 frames
            if (tick) {
                sendState();
            }
            tick = !tick;

            long wait = Game.MS_PER_UPDATE - (System.currentTimeMillis() - last);
            if (wait > 0) {
                try {
                    Thread.sleep(wait);
                } catch (InterruptedException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }
    private void sendState() {
        WorldStatePacket wsp = world.generateState();
        wsp.time = System.currentTimeMillis();
        if (scoreChanged) {
            // generate teams' new score
            int team1score=0;
            int team2score=0;
            for (ServerPlayer p:players) {
                if (p.team==0) {
                    team2score += p.deaths;
                } else {
                    team1score += p.deaths;
                }
            }
            events.add(new ScoreChangedEvent(team1score,team2score));
            scoreChanged = false;
        }
        wsp.events = events;

        // Send world data to players
        for (ServerPlayer p : players) {
            WorldStatePacket filteredState = world.filter(wsp, p.id);
            p.sendWorldState(filteredState);
        }
        events = new LinkedList<GameEvent>();
    }

    private ServerPlayer findPlayer(int id) {
        for (ServerPlayer p:players) {
            if (p.id == id) {
                return p;
            }
        }
        return null;
    }
    
    @Override
    public void onEventReceived(GameEvent event) {
        if (event instanceof PlayerDieEvent) {
            PlayerDieEvent e = (PlayerDieEvent) event;
            ServerPlayer killer = findPlayer(e.killerID);
            ServerPlayer killed = findPlayer(e.killedID);
            
            killed.deaths++;
            if (killer.team!=killed.team) {
                killer.kills++;
            } else { 
                killer.kills--;
            }
            scoreChanged = true;
            events.add(event);
        }
        else {
            events.add(event);
        }
    }
    
    /**
     * Receive & process input data from players in another thread to avoid blocking
     * the server.
     */
    private class InputReceiver implements Runnable {
        private ServerPlayer player;
        private ControlledCharacter character;
        
        public InputReceiver (ServerPlayer player, ControlledCharacter character) {
            this.player = player;
            this.character = character;
        }
        @Override
        public void run() {
            while (playing) {
                InputPacket input = player.getInput();
                character.processInput(input);
            }
        }
    }
}
