package sound;

import java.io.File;
import java.io.IOException;

import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.FloatControl;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;

/**
 * 
 */
public class MusicPlayer extends Thread {
    public static final float DEFAULT_VOLUME = -10;
    public static int STATUS;

    public static final int PAUSED = 1;
    public static final int STOPPED = 2;
    public static final int PLAYING = 3;

    private String filename;
    private float volume;

    private final int EXTERNAL_BUFFER_SIZE = 524288; // 128Kb
    private SourceDataLine auline;

    /**
     * MusicPlayer is used to load and play music files, which have a somewhat longer
     * duration and should not be pre-sampled like sounds. 
    * @param wavfile The name of the music file.
    * @param volume The volume to play at.
     */
    public MusicPlayer(String wavfile, float volume) {
        STATUS = PLAYING;
        this.volume = volume;
        filename = wavfile;
    }

    /**
     * MusicPlayer is used to load and play music files, which have a somewhat longer
     * duration and should not be pre-sampled like sounds. 
    * @param wavfile
    * @param isLoop
     */
    public MusicPlayer(String wavfile) {
        this(wavfile,DEFAULT_VOLUME);
    }
    
    /**
     * Sets music to stopped
     */
    public void setMusicStop() {
        STATUS = STOPPED;
        auline.stop();
        auline.close();
    }

    /**
     * Sets music to paused
     */
    public void setMusicPause() {
        STATUS = PAUSED;
    }

    /**
     * Sets music to play
     */
    public void setMusicPlay() {
        STATUS = PLAYING;
    }
    
    /**
     * Play the music
     */
    public void run() {
        // Get the target file
        File soundFile = new File(filename);
        if (!soundFile.exists()) {
            // Show error message if file not found
            System.err.println("Wave file not found: " + filename);
            return;
        }
        // Init a AudioInputStream for reading music file
        AudioInputStream audioInputStream = null;
        try {

            audioInputStream = AudioSystem.getAudioInputStream(soundFile);
        } catch (Throwable t) {
            // Do nothing when error
        }

        // Identify the music file format
        AudioFormat format = audioInputStream.getFormat();
        auline = null;
        DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);

        try {
            // Try to get music file content
            auline = (SourceDataLine) AudioSystem.getLine(info);
            auline.open(format);
        } catch (LineUnavailableException e) {
            e.printStackTrace();
            return;
        } catch (Exception e) {
            e.printStackTrace();
            return;
        }
        FloatControl gainControl = 
                (FloatControl) auline.getControl(FloatControl.Type.MASTER_GAIN);
        gainControl.setValue(volume); // Reduce volume by 10 decibels.
        auline.start();

        int nBytesRead = 0;
        byte[] abData = new byte[EXTERNAL_BUFFER_SIZE];

        try {
            while (nBytesRead != -1 && STATUS != STOPPED) {
                // Play music
                if (STATUS == PLAYING) {
                    nBytesRead = audioInputStream
                            .read(abData, 0, abData.length);
                    if (nBytesRead >= 0)
                        auline.write(abData, 0, nBytesRead);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
            return;
        } finally {
            // Close io
            auline.drain();
            auline.close();
        }

    }
}