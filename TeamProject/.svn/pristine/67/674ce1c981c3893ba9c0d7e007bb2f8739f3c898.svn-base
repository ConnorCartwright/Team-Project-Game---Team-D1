package graphics;

import java.awt.Color;
import java.awt.Graphics;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;

import javax.swing.JFrame;

import screen.Utils;

public class AnimationSystem {
	ConcurrentLinkedQueue<Animation> animations;
	
	public AnimationSystem() {
		animations = new ConcurrentLinkedQueue<Animation>();
	}

	public void addNoiseAnimation(int x, int y, float noise) {
	    if (noise>=4) {
    	    long duration = 1000 + (int)noise*5;
    		animations.add(new ExpandingCircleAnimation(x,y,noise/2,duration,0));
    		animations.add(new ExpandingCircleAnimation(x,y,noise/2,duration-100,200));
	    }
	}
	
	public void addShotAnimation(int x, int y, double direction) {
	    for (int i=0;i<6;i++) {
            double randomDirection = direction + 2 * Utils.random().nextGaussian()/5;
            ParticleAnimation p = new ParticleAnimation(x, y, randomDirection, 8, 7, 300,Color.WHITE);
            p.setGrowth(-0.4,-0.4);
            p.setSizeDefault(true);
            animations.add(p);
        }
	}
	
	public void addBloodAnimation(int x, int y) {
        for (int i=0;i<5;i++) {
            double randomDirection = Utils.random().nextDouble()*Math.PI*2;
            ParticleAnimation p = new ParticleAnimation(x, y, randomDirection, 1.1, 12, 500,Color.RED);
            p.setGrowth(-0.5,-0.5);
            p.setSizeDefault(true);
            animations.add(p);
        }
    }
	
	public void addBulletWallAnimation(int x, int y) {
	    int n = 8;
        for (int i=0;i<n;i++) {
            double randomDirection = i*Math.PI*2/n+Utils.random().nextGaussian()/5;
            ParticleAnimation p = new ParticleAnimation(x, y, randomDirection, 2, 7, 500,Color.WHITE);
            p.setGrowth(-0.35,-0.35);
            p.setSizeDefault(true);
            animations.add(p);
        }
    }
	
	/**
	 * Avoid using this method; written just for testing.
	 * Always use pre-defined add animation methods,
	 * or write a new one if what you want doesn't exist yet.
	 */
	public void addCustomAnimation(Animation animation) {
	    animations.add(animation);
	}
	
	public void update() {
		List<Animation> removed = new LinkedList<Animation>();
		for (Animation a:animations) {
			if (a.update())
				removed.add(a);
		}
		animations.removeAll(removed);
	}
	
	public void render(Graphics g) {
		for (Animation a:animations) {
			a.render(g);
		}
	}
	
	public static void main(String[] args) {
		JFrame frame = new JFrame();
		frame.setIgnoreRepaint(true);
        frame.setResizable(true);
 
        
	}
}
