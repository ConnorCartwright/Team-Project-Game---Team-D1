package core;

import gui.ClientPlayer;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.ImageObserver;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;

import character.Commando;
import character.Scout;
import character.Sniper;
import character.SpecOps;
import character.Tank;

/**
 * This class will handle power ups.
 * 
 * @author Madyan Al-Jazaeri
 * @author Morgan Rees
 */
public class PowerUp {
	
	private int x;
	private int y;
	private int type;
	private Image icon;
	private boolean display;
	private ClientPlayer picker;
	private long timestamp;
	
//	public static void main(String[] args) throws FileNotFoundException, IOException {
//		Arena arena = new Arena("test40", false);
//		System.out.println(calaculateAmount(arena.getHeight(), arena.getWidth()));
////		int count = 0;
////		for (int i = 0; i < arena.getWidth(); i++) {
////			for (int j = 0; j < arena.getHeight(); j++) {
////				if (isValidCoord(arena, null, i, j)) {
////					count++;
////				}
////			}
////		}
////		System.out.println(count);
//		
//	}

	/**
	 * @param x the x coordinate to set
	 * @param y the y coordinate to set
	 */
	public PowerUp(int x, int y, int type, Image icon) {
		this.x = x;
		this.y = y;
		this.type = type;
		this.icon = icon;
		this.display = true;
		this.picker = null;
		this.timestamp = 0;
	}

	/**
	 * @return the x coordinate
	 */
	public int getX() {
		return x;
	}

	/**
	 * @return the y coordinate
	 */
	public int getY() {
		return y;
	}
	
	/**
	 * @return the type
	 */
	public int getType() {
		return type;
	}
	
	/**
	 * @param x the x coordinate to set
	 * @param y the y coordinate to set
	 */
	public void setCoord(int x, int y) {
		this.x = x;
		this.y = y;
	}

	/**
	 * @param players player list
	 * @return player touching power up
	 */
	private ClientPlayer findTouching(List<ClientPlayer> players) {
		int realX = getX() * Tile.tileSize + PowerUps.TILE_OFFSET;
		int realY = getY() * Tile.tileSize + PowerUps.TILE_OFFSET;
		
		for (ClientPlayer player : players) {
			int deltaX = player.character.x - realX;
			int deltaY = player.character.y - realY;
			int min = player.character.r * -1;
			int max = player.character.r + PowerUps.ICON_SIZE;
			if (deltaX >= min && deltaX <= max && deltaY >= min && deltaY <= max) {
				return player;
			}
		}
		
		return null;
	}
	
	/**
	 * @param powerUps power ups array
	 * @param arena game arena
	 * @param players player list
	 */
	public void update(PowerUp[] powerUps, Arena arena, List<ClientPlayer> players) {
		if (display) {
			picker = findTouching(players);
			if (picker != null) {
				display = false;
				timestamp = System.currentTimeMillis();
				activate();
			}	
			return;
		}
		
		long timeDifference = System.currentTimeMillis() - timestamp;
		if (picker != null && timeDifference > PowerUps.PERIODS[type] * 1000) {
			timestamp = System.currentTimeMillis();
			picker = null;
			deactivate();
		} else if (timeDifference > PowerUps.REGENERATE_PERIOD * 1000) {
			Point coord = PowerUps.getValidCoord(powerUps, arena, players);
			int x = coord.x;
			int y = coord.y;
			setCoord(x, y);
			display = true;
		}
	}

	/**
	 * Activate power up.
	 */
	private void activate() {
		switch (type) {
			case PowerUps.HEALTH_KIT:
				
				break;

			case PowerUps.COOLDOWN_REDUCER:
				
				break;
				
			case PowerUps.DAMAGE_BOOSTER:
				
				break;
				
			default:
				break;
		}
	}
	
	/**
	 * Deactivate power up.
	 */
	private void deactivate() {
		switch (type) {
			case PowerUps.HEALTH_KIT:
				
				break;

			case PowerUps.COOLDOWN_REDUCER:
				
				break;
				
			case PowerUps.DAMAGE_BOOSTER:
				
				break;
				
			default:
				break;
		}
	}
	
	/**
	 * @param g graphics to draw on
	 */
	public void render(Graphics g) {
		if (display) {
			int imageX = getX() * Tile.tileSize + PowerUps.TILE_OFFSET;
			int imageY = getY() * Tile.tileSize + PowerUps.TILE_OFFSET;
			g.drawImage(icon, imageX, imageY, null);
		}
		
		if (picker != null) {
			g.setColor(PowerUps.COLORS[type]);
			int pickerRadius = picker.character.r;
			int ringX = picker.character.x - pickerRadius - 2;
			int ringY = picker.character.y - pickerRadius - 2;
			int size = 2 * pickerRadius + 4;
			g.drawOval(ringX, ringY, size, size);
		}
	}
	
}
