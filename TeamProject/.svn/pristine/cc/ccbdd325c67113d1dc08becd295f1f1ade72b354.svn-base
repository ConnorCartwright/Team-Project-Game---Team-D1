package graphics;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.util.Hashtable;

import physics.Arena;
import physics.Tile;
import server.FullCharacterData;
import character.CharacterFactory;

public class Renderer {
    static private BufferedImage background;
    public static void init (Arena a) {
        background = new BufferedImage(a.getWidthPixel(),a.getHeightPixel(),BufferedImage.TYPE_3BYTE_BGR);
        Graphics g = background.getGraphics();
        for (int x = 0; x < a.getWidth(); x++) {
            for (int y = 0; y <= a.getHeight(); y++) {
                Image image = a.get(x, y).getImage();
                g.drawImage(image, x * Tile.tileSize, y * Tile.tileSize, Tile.tileSize, Tile.tileSize, null);
            }
        }
        background = ImageBlender.blurImage(background);
    }
    
    public static void renderArenaBackground (Graphics g, Rectangle window) {
        int x0 = (int)window.getX();
        int y0 = (int)window.getY();
        int x1 = x0 + (int)window.getWidth();
        int y1 = y0 + (int)window.getHeight();
        g.drawImage(background,x0,y0,x1,y1,x0,y0,x1,y1,null);
    }
    
    public static void renderMainCharacter (Graphics g,FullCharacterData player, int typeId) {
        // render the character
        renderCharacter(g,player.x,player.y,player.radius,typeId,true);
        
        // render the health bar
        Graphics2D g2d = (Graphics2D) g;
        g2d.setStroke(new BasicStroke(4));
        g2d.setColor(new Color(255, 50, 50));
        int length = (int) (0.2 * player.healthPoints);
        int topy = player.y - player.radius - 7;
        g2d.drawLine(player.x - length / 2, topy, player.x + length / 2,topy);
        
        // render the reload bar
        if (player.reloadPercent<1) {
            topy += 4;
            g2d.setStroke(new BasicStroke(3));
            g2d.setColor(Color.WHITE);
            int x = player.x-player.radius;
            g2d.drawLine(x, topy,x+(int)(player.radius*2*player.reloadPercent),topy);
        }
    }
    
    public static void renderCharacter(Graphics g, int x, int y, int r, int typeId, boolean friendly) {
        Graphics2D g2d = (Graphics2D) g;
        
        g2d.setStroke(new BasicStroke(2));
        g2d.setColor(Color.BLACK);
        g2d.fillOval(x - r, y - r, 2 * r, 2 * r);
        int color;
        if (friendly) {
            g2d.setColor(Color.GREEN);
            color = 1;
        } else {
            g2d.setColor(Color.RED);
            color = 0;
        }
        g2d.drawOval(x - r, y - r, 2 * r, 2 * r);
        int sqrt = (int)(r/Math.sqrt(2)-1);
        g2d.drawImage(CharacterFactory.getImage(typeId,color),x-sqrt,y-sqrt,2*sqrt,2*sqrt,null);
        g2d.setStroke(new BasicStroke(1));
    }
    
    public static void renderProjectile (Graphics g, int px, int py, int dx, int dy) {
        Graphics2D g2d = (Graphics2D) g;
        
        g2d.setColor(Color.WHITE);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawLine(px, py, px - dx, py - dy);
    }
}
